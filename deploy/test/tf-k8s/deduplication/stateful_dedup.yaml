---
# Test case for FR-DP-02: Stateful Detection
apiVersion: tfk8s.nrdot.newrelic.com/v1
kind: TestScenario
metadata:
  name: fr-dp-02-stateful-detection
  labels:
    requirement: FR-DP-02
    suite: deduplication
spec:
  description: |
    This test verifies that the FB-DP function block maintains deduplication state
    across pod restarts and continues to properly deduplicate telemetry data based
    on stored state.
  
  setup:
    - apply:
        kind: PersistentVolumeClaim
        name: fb-dp-data
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
    
    - apply:
        kind: NRDOTPlusPipeline
        name: test-stateful-dedup-pipeline
        spec:
          functionBlocks:
            - name: receiver
              type: fb-rx
              config:
                specific:
                  ports:
                    otlpGrpc: 4317
                    otlpHttp: 4318
              connections:
                - target: deduplicator
            
            - name: deduplicator
              type: fb-dp
              config:
                specific:
                  storageType: badgerdb
                  ttlMinutes: 60
                  persistentStorage:
                    enabled: true
                    volumeClaimName: fb-dp-data
                    path: /data/dedup
                  deduplicationKey: ["id", "timestamp"]
              connections:
                - target: gateway
            
            - name: gateway
              type: fb-gw
              config:
                specific:
                  schemaValidation: true
                  exportEndpoints:
                    - name: "prometheus"
                      type: "prometheus"
                      url: "http://test-prometheus:9090/api/v1/write"
    
    - deploy:
        name: telemetry-generator
        image: nrdot-internal-devlab/telemetry-generator:latest
        env:
          - name: TARGET_OTLP_ENDPOINT
            value: http://receiver:4318
          - name: GENERATION_INTERVAL_MS
            value: "0"  # Single batch mode
          - name: SERIES_COUNT
            value: "1"

  testCases:
    - name: "Stateful Deduplication Across Restarts"
      description: "Verify deduplication state is maintained across pod restarts"
      steps:
        # Phase 1: Send initial batch and verify metrics
        - generateTelemetry:
            name: telemetry-generator
            metrics:
              - id: "test-metric-1"
                name: "test_counter"
                type: "counter"
                timestamp: "2025-05-10T12:00:00Z"
                value: 10
                attributes:
                  service.name: "test-service"
                  environment: "dev"
        
        - wait: 5s
        
        - verifyMetrics:
            endpoint: "http://test-prometheus:9090/api/v1/query"
            query: 'test_counter{service_name="test-service",environment="dev"}'
            expectations:
              - type: "value"
                operator: "=="
                value: 10
        
        # Phase 2: Send same batch again and verify no change (deduplication works)
        - generateTelemetry:
            name: telemetry-generator
            metrics:
              - id: "test-metric-1"
                name: "test_counter"
                type: "counter"
                timestamp: "2025-05-10T12:00:00Z"
                value: 10
                attributes:
                  service.name: "test-service"
                  environment: "dev"
        
        - wait: 5s
        
        - verifyMetrics:
            endpoint: "http://test-prometheus:9090/api/v1/query"
            query: 'test_counter{service_name="test-service",environment="dev"}'
            expectations:
              - type: "value"
                operator: "=="
                value: 10  # Value should not change (still 10)
        
        # Phase 3: Restart the deduplicator pod
        - restartPod:
            selector: "app=fb-dp,instance=deduplicator"
        
        - wait: 15s  # Wait for pod to restart and become ready
        
        # Phase 4: Send the same batch again and verify no change (persistence works)
        - generateTelemetry:
            name: telemetry-generator
            metrics:
              - id: "test-metric-1"
                name: "test_counter"
                type: "counter"
                timestamp: "2025-05-10T12:00:00Z"
                value: 10
                attributes:
                  service.name: "test-service"
                  environment: "dev"
        
        - wait: 5s
        
        - verifyMetrics:
            endpoint: "http://test-prometheus:9090/api/v1/query"
            query: 'test_counter{service_name="test-service",environment="dev"}'
            expectations:
              - type: "value"
                operator: "=="
                value: 10  # Value should not change (still 10)
        
        # Phase 5: Send a new metric and verify it passes through
        - generateTelemetry:
            name: telemetry-generator
            metrics:
              - id: "test-metric-2"
                name: "test_counter"
                type: "counter"
                timestamp: "2025-05-10T12:30:00Z"
                value: 5
                attributes:
                  service.name: "test-service"
                  environment: "dev"
        
        - wait: 5s
        
        - verifyMetrics:
            endpoint: "http://test-prometheus:9090/api/v1/query"
            query: 'test_counter{service_name="test-service",environment="dev"}'
            expectations:
              - type: "value"
                operator: "=="
                value: 15  # 10 (original) + 5 (new) = 15
        
        # Phase 6: Verify metric for the number of deduplicated items
        - verifyMetrics:
            endpoint: "http://deduplicator:2112/metrics"
            query: 'fb_dp_deduplicated_total'
            expectations:
              - type: "value"
                operator: ">="
                value: 2  # Should have deduplicated at least 2 metrics
    
    - name: "TTL Expiration"
      description: "Verify deduplication entries expire after TTL"
      steps:
        # Send initial batch
        - generateTelemetry:
            name: telemetry-generator
            metrics:
              - id: "ttl-test-metric-1"
                name: "ttl_test_counter"
                type: "counter"
                timestamp: "2025-05-10T12:00:00Z"
                value: 10
                attributes:
                  service.name: "ttl-test"
        
        - wait: 5s
        
        # Verify it was processed
        - verifyMetrics:
            endpoint: "http://test-prometheus:9090/api/v1/query"
            query: 'ttl_test_counter{service_name="ttl-test"}'
            expectations:
              - type: "value"
                operator: "=="
                value: 10
        
        # Mock time advancement (61 minutes into the future, beyond TTL)
        - mockTime:
            offsetMinutes: 61
        
        # Send the same batch again
        - generateTelemetry:
            name: telemetry-generator
            metrics:
              - id: "ttl-test-metric-1"
                name: "ttl_test_counter"
                type: "counter"
                timestamp: "2025-05-10T12:00:00Z"
                value: 10
                attributes:
                  service.name: "ttl-test"
        
        - wait: 5s
        
        # Verify it was processed again (TTL expired)
        - verifyMetrics:
            endpoint: "http://test-prometheus:9090/api/v1/query"
            query: 'ttl_test_counter{service_name="ttl-test"}'
            expectations:
              - type: "value"
                operator: "=="
                value: 20  # 10 (original) + 10 (after TTL) = 20

  cleanup:
    - delete:
        kind: NRDOTPlusPipeline
        name: test-stateful-dedup-pipeline
    - delete:
        name: telemetry-generator
    - delete:
        kind: PersistentVolumeClaim
        name: fb-dp-data
