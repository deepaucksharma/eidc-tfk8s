#!/usr/bin/env python3
"""
Reads docs/appendices/appendix-a-test-matrix.md and injects it into the big PRD
between <!--- AUTOGENERATED: APPENDIX A START --> markers.
Same for Appendix I.
Run with `--verify` to exit non-zero if any P0/P1 Status != "Passing".
"""
import pathlib, sys, re, markdown, argparse

ROOT = pathlib.Path(__file__).resolve().parents[2]
A_PATH = ROOT / "docs/appendices/appendix-a-test-matrix.md"
I_PATH = ROOT / "docs/appendices/appendix-i-e2e-program.md"
PRD_PATH = ROOT / "docs/prd/PRD-NRDOT-INT-LAB-v2.1.2-v1.6.md"

def extract_section(path):
    return path.read_text()

def inject(prd_text, marker, block):
    pattern = rf"<!--- AUTOGENERATED: {marker} START -->.*?<!--- AUTOGENERATED: {marker} END -->"
    repl    = f"<!--- AUTOGENERATED: {marker} START -->\n\n{block}\n<!--- AUTOGENERATED: {marker} END -->"
    return re.sub(pattern, repl, prd_text, flags=re.S|re.M)

def verify():
    import csv, io
    rows = list(csv.reader(io.StringIO(extract_section(A_PATH).split("|---")[1]), delimiter="|"))
    bad = [r[0].strip() for r in rows if r and r[7].strip() in ("Not Started","In Dev","Failing","Blocked") and r[1].strip() in ("P0","P1")]
    if bad:
        print("‚ùå Unmet critical requirements:", ", ".join(bad))
        sys.exit(1)

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--verify", action="store_true")
    args = ap.parse_args()
    if args.verify:
        return verify()
    prd = PRD_PATH.read_text()
    prd = inject(prd, "APPENDIX A", extract_section(A_PATH))
    prd = inject(prd, "APPENDIX I", extract_section(I_PATH))
    PRD_PATH.write_text(prd)

if __name__ == "__main__":
    main()