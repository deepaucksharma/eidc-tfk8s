#!/usr/bin/env python3
"""
Test Matrix Builder

This script reads the test matrix from appendix-a-test-matrix.md and
injects it into the PRD markdown file, as well as extracting test scenarios
from appendix-i-e2e-program.md and injecting them into the PRD.
"""

import os
import re
import sys


def extract_table_from_appendix_a(appendix_a_path):
    """Extract the markdown table from appendix-a-test-matrix.md"""
    with open(appendix_a_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Find the table (skip the YAML front matter and header)
    table_pattern = r'\|\s*ID\s*\|\s*Priority\s*\|\s*Requirement\s*\|\s*Status\s*\|\s*Test\(s\)\s*\|\s*\n\|[-\s|]+\|\n((?:\|.*\|\n)+)'
    match = re.search(table_pattern, content, re.MULTILINE)
    
    if not match:
        print(f"Error: Could not find the test matrix table in {appendix_a_path}")
        sys.exit(1)
    
    # Return the header and content of the table
    header = "| ID | Priority | Requirement | Status | Test(s) |\n|----|----|----|----|----|\n"
    return header + match.group(1).strip()

def extract_scenarios_from_appendix_i(appendix_i_path):
    """Extract the test scenarios from appendix-i-e2e-program.md"""
    with open(appendix_i_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Extract the content of the "Test Scenarios" section
    scenarios_pattern = r'## 3\. Test Scenarios\n\n(.*?)(?:\n##|\Z)'
    match = re.search(scenarios_pattern, content, re.DOTALL)
    
    if not match:
        print(f"Error: Could not find the test scenarios section in {appendix_i_path}")
        sys.exit(1)
        
    return match.group(1).strip()

def update_prd_with_table_and_scenarios(prd_path, table_content, scenarios_content):
    """Update the PRD file with the test matrix table and scenarios"""
    with open(prd_path, 'r', encoding='utf-8') as f:
        prd_content = f.read()
    
    # Replace the test matrix section
    table_pattern = r'<!--- AUTOGENERATED BY test-matrix-builder, DO NOT EDIT BY HAND -->\n## Appendix A: Requirement to Test Matrix\n\n.*?<!--- END AUTOGENERATED SECTION -->'
    updated_prd = re.sub(
        table_pattern,
        f'<!--- AUTOGENERATED BY test-matrix-builder, DO NOT EDIT BY HAND -->\n## Appendix A: Requirement to Test Matrix\n\n{table_content}\n<!--- END AUTOGENERATED SECTION -->',
        prd_content,
        flags=re.DOTALL
    )
    
    # Replace the E2E test program section
    scenarios_pattern = r'<!--- AUTOGENERATED BY test-matrix-builder, DO NOT EDIT BY HAND -->\n## Appendix I: End-to-End Test Program\n\n.*?<!--- END AUTOGENERATED SECTION -->'
    updated_prd = re.sub(
        scenarios_pattern,
        f'<!--- AUTOGENERATED BY test-matrix-builder, DO NOT EDIT BY HAND -->\n## Appendix I: End-to-End Test Program\n\n{scenarios_content}\n<!--- END AUTOGENERATED SECTION -->',
        updated_prd,
        flags=re.DOTALL
    )
    
    with open(prd_path, 'w', encoding='utf-8') as f:
        f.write(updated_prd)

def verify_test_matrix(appendix_a_path):
    """Verify that all P0/P1 rows in the test matrix have Status=Passing"""
    with open(appendix_a_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Find rows with P0 or P1 priority that don't have Passing status
    failing_rows = []
    row_pattern = r'\|\s*([A-Z\-0-9]+)\s*\|\s*(P0|P1)\s*\|.*\|\s*(?!Passing)(\w+)\s*\|'
    matches = re.finditer(row_pattern, content, re.MULTILINE)
    
    for match in matches:
        failing_rows.append({
            'id': match.group(1),
            'priority': match.group(2),
            'status': match.group(3)
        })
    
    if failing_rows:
        print("Error: The following P0/P1 requirements do not have Passing status:")
        for row in failing_rows:
            print(f"  {row['id']} ({row['priority']}): {row['status']}")
        sys.exit(1)
    
    print("All P0/P1 requirements have Passing status.")
    return True

def main():
    # Define paths
    base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    docs_dir = os.path.join(base_dir, 'docs')
    prd_path = os.path.join(docs_dir, 'prd', 'PRD-NRDOT-INT-LAB-v2.1.2-v1.6.md')
    appendix_a_path = os.path.join(docs_dir, 'appendices', 'appendix-a-test-matrix.md')
    appendix_i_path = os.path.join(docs_dir, 'appendices', 'appendix-i-e2e-program.md')
    
    # Check command-line arguments
    if len(sys.argv) > 1 and sys.argv[1] == 'verify':
        verify_test_matrix(appendix_a_path)
        return
    
    # Extract content
    table_content = extract_table_from_appendix_a(appendix_a_path)
    scenarios_content = extract_scenarios_from_appendix_i(appendix_i_path)
    
    # Update the PRD
    update_prd_with_table_and_scenarios(prd_path, table_content, scenarios_content)
    
    print(f"Successfully updated {prd_path} with content from appendices.")

if __name__ == "__main__":
    main()
